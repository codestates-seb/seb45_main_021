{"version":3,"file":"static/js/70.3dd46f30.chunk.js","mappings":"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","sources":["components/common/ToggleButton.jsx","pages/PortfolioEdit.jsx","utils/shapingApiData.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst StyleToggleContainer = styled.div`\n  position: relative;\n  width: ${(props) => props.$width};\n  height: ${(props) => props.$height};\n  cursor: pointer;\n  border-radius: 50px;\n  transition: 0.3s;\n  border: 1px solid white;\n  &.toggle--checked {\n    background-color: var(--black-800);\n  }\n\n  .toggle-circle {\n    cursor: pointer;\n    transition: all 0.3s;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    margin: auto;\n    left: 2px;\n    width: ${(props) => `calc(${props.$height} - 8px)`};\n    height: ${(props) => `calc(${props.$height} - 8px)`};\n    border-radius: 50%;\n    background-color: var(--black-100);\n  }\n  .toggle--checked {\n    left: ${(props) => `calc(${props.$width} - ${props.$height} + 3px)`};\n  }\n`;\n\n/**\n *\n * @param {string} width 전체너비\n * @param {string} height 전체높이\n * @param {string} beforeBackColor 활성화 전 컬러\n * @param {string} afterBackColor 활성화 후 컬러\n * @param {string} circleColor 동그라미 컬러\n * @param {boolean} defaultValue 초기 상태 값\n * @param {function} onClickHandler 버튼 클릭시 작동되는 핸들러\n * @param {any} rest 나머지\n * @returns\n */\n\nexport default function ToggleButton({\n  width = '70px',\n  height = '35px',\n  defaultValue = false,\n  onClickHandler,\n  rest,\n}) {\n  const [isOn, setIsOn] = useState(defaultValue);\n  const handleToggleClick = () => {\n    setIsOn(!isOn);\n    onClickHandler && onClickHandler(!isOn);\n  };\n  \n  useEffect(()=>{\n    if(defaultValue !== undefined) {\n        setIsOn(defaultValue);\n    }\n  },[defaultValue])\n\n  return (\n    <>\n      <StyleToggleContainer\n        $width={width}\n        $height={height}\n        {...rest}\n        className={`toggle-container ${isOn && 'toggle--checked'}`}\n        onClick={handleToggleClick}\n      >\n        <div className={`toggle-circle ${isOn && 'toggle--checked'}`} />\n      </StyleToggleContainer>\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { styled } from 'styled-components';\nimport Input from '../components/common/Input';\nimport Select from '../components/common/Select';\nimport FileInput from '../components/common/FileInput';\nimport useForm from '../hooks/useForm';\nimport Page from './../components/common/Page';\nimport useNav from '../hooks/useNav';\nimport EnterTag from '../components/PfPjPublic/EnterTag';\nimport WriteHeader from '../components/PfPjPublic/WriteHeader';\nimport SelectBox from '../components/PfPjPublic/SelectBox';\nimport useError from '../hooks/useError';\nimport { checkValidations } from '../utils/checkValidations';\nimport ProGress from '../components/common/ProGress';\nimport ToggleButton from '../components/common/ToggleButton';\nimport languages from '../static/languages';\nimport {\n  portfolioErrorInitData,\n  portfolioWriteInitData,\n  portfolioWriteRule,\n} from '../static/portfolioInit';\nimport SubmitModalBox from '../components/PfPjPublic/SubmitModalBox';\nimport { shapingApiData } from '../utils/shapingApiData';\nimport { writeSubmitHandler } from '../utils/writeSubmitHandler';\nimport { useParams } from 'react-router-dom';\nimport api from '../hooks/useAxiosInterceptor';\nimport Modal from '../components/common/Modal';\n\nconst StyleProjectWrite = styled(Page)`\n  height: auto;\n  background-color: transparent;\n  padding-top: 6rem;\n  font-size: 1.6rem;\n\n  .margin-top-remove {\n    margin-top: -20px !important;\n  }\n  .input-container {\n    flex: 5;\n    height: 100%;\n    margin-right: 3rem;\n    > div {\n      margin-bottom: 3rem;\n    }\n  }\n  .imgs-container {\n    flex: 6;\n    height: auto;\n    > div {\n      margin-bottom: 6rem;\n    }\n  }\n  .submit-box {\n    width: 100%;\n    margin-bottom: 10rem;\n    display: flex;\n    button {\n      font-size: 1.6rem;\n      padding: 5px 15px;\n      margin-right: 5rem;\n    }\n  }\n  .data-select-container {\n    gap: 1rem;\n    div {\n      flex: 1;\n    }\n  }\n  .error {\n    color: var(--error);\n    margin-top: 1rem;\n  }\n`;\n\nexport default function PortfolioEdit() {\n  const { toPortfolio } = useNav();\n  const { portfolioId } = useParams();\n  const [dataForm, handleInputChange, clearForm, setDataForm] = useForm(portfolioWriteInitData);\n  const [errors, handleErrorChange, clearError, setErrors] = useError({}, portfolioWriteRule);\n  const [showModal, setShowModal] = useState(false);\n  const [apiResult, setApiResult] = useState(false);\n  //false면 프론트측 에러 true면 백측에러\n  const [whichError, setWhichError] = useState(false);\n  const [firstResult, setFirstResult] = useState(true);\n\n  const width = '100%';\n  const height = '70rem';\n\n  useEffect(() => {\n    api\n      .get(`/portfolios/${portfolioId}`)\n      .then((res) => {\n        setDataForm(shapingApiData(res.data));\n      })\n      .catch((err) => {\n        setShowModal(true);\n        setWhichError(true);\n        setFirstResult(false);\n      });\n  }, []);\n\n  //테스트용 언어 옵션들\n  const languagesOptions = (() => {\n    const arr = [];\n    arr.push({ value: '', label: '-' });\n    for (let i = 0; i < languages.length; i++) {\n      arr.push({ value: languages[i], label: languages[i] });\n    }\n    return arr;\n  })();\n\n  return (\n    <StyleProjectWrite className=\"col\">\n      {showModal && (\n        <Modal\n          type={'alert'}\n          setIsOpen={setShowModal}\n          title={apiResult ? '수정 완료' : `${whichError ? '통신 에러' : '입력 형식 오류'}`}\n          body={\n            apiResult\n              ? '확인 버튼 클릭시 프로젝트리스트 화면으로 넘어갑니다.'\n              : `${\n                  whichError\n                    ? '서버와의 통신에 실패했습니다. 다시 시도해 주세요.'\n                    : '필수 입력 양식을 다시 확인해 주세요.'\n                }`\n          }\n          confirmHandler={\n            apiResult\n              ? () => {\n                  toPortfolio();\n                }\n              : firstResult\n              ? undefined\n              : () => {\n                  toPortfolio();\n                }\n          }\n        />\n      )}\n      <WriteHeader type=\"portfolio\" state=\"edit\" />\n      <div className=\"row\">\n        <div className=\"input-container col\">\n          <Input\n            label={'포트폴리오 제목'}\n            width={'100%'}\n            onChange={(e) => {\n              handleInputChange(null, e.target.value, 'title');\n              handleErrorChange(null, e.target.value, 'title', checkValidations);\n            }}\n            placeholder={'최소 10 글자 최대 30글자까지 입력 가능 합니다. (필수)'}\n            type=\"text\"\n            maxLength={30}\n            defaultValue={dataForm.title}\n          />\n          <ProGress\n            className={'margin-top-remove'}\n            width={'100%'}\n            height={'1.2rem'}\n            fontSize={'1.2rem'}\n            comPleteNum={portfolioWriteRule.title.max}\n            proGressNum={dataForm.title.length ?? 0}\n            error={dataForm.title.length < 10 ? true : false}\n          />\n\n          <SelectBox\n            text={'사용할 언어를 선택 해주세요.'}\n            component={\n              <Select\n                width={width}\n                options={languagesOptions}\n                defaultLabel={dataForm.lang}\n                onClickHandler={(e) => {\n                  handleInputChange(null, e, 'language');\n                  handleErrorChange(null, e, 'language', checkValidations);\n                }}\n              />\n            }\n            error={errors.lang}\n            name=\"언어\"\n          />\n\n          <SelectBox\n            text={'포트폴리오에 댓글 허용 여부'}\n            component={\n              <ToggleButton\n                width=\"10rem\"\n                height=\"5rem\"\n                onClickHandler={() => {\n                  handleInputChange(null, !dataForm.isComments, 'isComments');\n                }}\n                defaultValue={dataForm.isComments}\n                hideError={true}\n              />\n            }\n            hideError={true}\n            customText={dataForm.isComments ? '허용됨' : '허용되지 않음'}\n          />\n\n          <EnterTag\n            width=\"100%\"\n            height=\"3.5rem\"\n            placeholder=\"태그는 최대 3개까지 등록이 가능합니다.\"\n            handleInputChange={handleInputChange}\n            defaultTags={dataForm.tags}\n          />\n\n          <Input\n            label={'포트폴리오 본문'}\n            width={width}\n            height={height}\n            type={'textarea'}\n            onChange={(e) => {\n              handleInputChange(null, e.target.value, 'body');\n              handleErrorChange(null, e.target.value, 'body', checkValidations);\n            }}\n            placeholder={'최소 200 ~ 1000글자까지 입력 가능합니다. (필수)'}\n            maxLength={1000}\n            error={errors.body}\n            defaultValue={dataForm.body}\n          />\n          <ProGress\n            className={'margin-top-remove'}\n            width={'100%'}\n            height={'1.2rem'}\n            fontSize={'1.2rem'}\n            comPleteNum={portfolioWriteRule.body.max}\n            proGressNum={dataForm.body.length ?? 0}\n            error={dataForm.body.length < 100 ? true : false}\n          />\n        </div>\n\n        <div className=\"imgs-container col\">\n          <FileInput\n            name={'타이틀 이미지'}\n            width={'70rem'}\n            height={'65rem'}\n            number={1}\n            dataForm={dataForm}\n            handleInputChange={handleInputChange}\n            handleErrorChange={handleErrorChange}\n            setWillDeleteImgs={true}\n            clearError={clearError}\n            defaultImgs={dataForm.projectTitleImage}\n          />\n\n          <FileInput\n            name={'이미지'}\n            width={'70rem'}\n            height={'65rem'}\n            number={7}\n            dataForm={dataForm}\n            handleInputChange={handleInputChange}\n            setWillDeleteImgs={true}\n            defaultImgs={dataForm.images}\n          />\n        </div>\n      </div>\n      <SubmitModalBox\n        submitTitle={'수정 확인'}\n        submitMessage={'댓글 허락하지 않음 선택 시 기존의 댓글들도 보이지 않습니다.'}\n        submitCheckHandler={() => writeSubmitHandler(dataForm, errors, setErrors, 'portfolio')}\n        cancelTitle={'취소 확인'}\n        cancelMessage={'취소시 작성한 내용은 저장되지 않습니다.'}\n        cancelCheckHandler={toPortfolio}\n      />\n    </StyleProjectWrite>\n  );\n}\n","export const shapingApiData = (obj,type) => {\n    const newData = {...obj};\n    for(let key in obj) {\n        if(key === 'images') {\n            const tempArr = [];\n            for(let i = 0; i < obj[key].length; i++) {\n                tempArr.push(obj[key][i].imageUrl);\n            }\n            newData[key] = tempArr;\n            newData.imageFile = new FormData();\n            newData.imageUrls = [];\n        } else if (key === 'projectTitleImage') {\n            newData[key] = [obj[key].imageUrl];\n            newData.titleImageFile = new FormData();\n            newData.titleImageUrl = '';\n        }\n    }\n    return newData;\n}\n"],"names":["StyleToggleContainer","styled","div","_templateObject","_taggedTemplateLiteral","props","$width","$height","concat","ToggleButton","_ref","_ref$width","width","_ref$height","height","_ref$defaultValue","defaultValue","onClickHandler","rest","_useState","useState","_useState2","_slicedToArray","isOn","setIsOn","useEffect","undefined","_jsx","_Fragment","children","_objectSpread","className","onClick","StyleProjectWrite","Page","PortfolioEdit","_dataForm$title$lengt","_dataForm$body$length","toPortfolio","useNav","portfolioId","useParams","_useForm","useForm","portfolioWriteInitData","_useForm2","dataForm","handleInputChange","setDataForm","_useError","useError","portfolioWriteRule","_useError2","errors","handleErrorChange","clearError","setErrors","showModal","setShowModal","_useState3","_useState4","apiResult","_useState5","_useState6","whichError","setWhichError","_useState7","_useState8","firstResult","setFirstResult","api","get","then","res","shapingApiData","data","catch","err","languagesOptions","arr","push","value","label","i","languages","length","_jsxs","Modal","type","setIsOpen","title","body","confirmHandler","WriteHeader","state","Input","onChange","e","target","checkValidations","placeholder","maxLength","ProGress","fontSize","comPleteNum","max","proGressNum","error","SelectBox","text","component","Select","options","defaultLabel","lang","name","isComments","hideError","customText","EnterTag","defaultTags","tags","FileInput","number","setWillDeleteImgs","defaultImgs","projectTitleImage","images","SubmitModalBox","submitTitle","submitMessage","submitCheckHandler","writeSubmitHandler","cancelTitle","cancelMessage","cancelCheckHandler","obj","newData","key","tempArr","imageUrl","imageFile","FormData","imageUrls","titleImageFile","titleImageUrl"],"sourceRoot":""}