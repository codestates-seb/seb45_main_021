{"version":3,"file":"static/js/70.ac3d383d.chunk.js","mappings":"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","sources":["components/common/ToggleButton.jsx","pages/NotFound.jsx","pages/PortfolioEdit.jsx","utils/shapingApiData.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst StyleToggleContainer = styled.div`\n  position: relative;\n  width: ${(props) => props.$width};\n  height: ${(props) => props.$height};\n  cursor: pointer;\n  border-radius: 50px;\n  transition: 0.3s;\n  border: 1px solid white;\n  &.toggle--checked {\n    background-color: var(--black-800);\n  }\n\n  .toggle-circle {\n    cursor: pointer;\n    transition: all 0.3s;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    margin: auto;\n    left: 2px;\n    width: ${(props) => `calc(${props.$height} - 8px)`};\n    height: ${(props) => `calc(${props.$height} - 8px)`};\n    border-radius: 50%;\n    background-color: var(--black-100);\n  }\n  .toggle--checked {\n    left: ${(props) => `calc(${props.$width} - ${props.$height} + 3px)`};\n  }\n`;\n\n/**\n *\n * @param {string} width 전체너비\n * @param {string} height 전체높이\n * @param {string} beforeBackColor 활성화 전 컬러\n * @param {string} afterBackColor 활성화 후 컬러\n * @param {string} circleColor 동그라미 컬러\n * @param {boolean} defaultValue 초기 상태 값\n * @param {function} onClickHandler 버튼 클릭시 작동되는 핸들러\n * @param {any} rest 나머지\n * @returns\n */\n\nexport default function ToggleButton({\n  width = '70px',\n  height = '35px',\n  defaultValue = false,\n  onClickHandler,\n  rest,\n}) {\n  const [isOn, setIsOn] = useState(defaultValue);\n  const handleToggleClick = () => {\n    setIsOn(!isOn);\n    onClickHandler && onClickHandler(!isOn);\n  };\n  \n  useEffect(()=>{\n    if(defaultValue !== undefined) {\n        setIsOn(defaultValue);\n    }\n  },[defaultValue])\n\n  return (\n    <>\n      <StyleToggleContainer\n        $width={width}\n        $height={height}\n        {...rest}\n        className={`toggle-container ${isOn && 'toggle--checked'}`}\n        onClick={handleToggleClick}\n      >\n        <div className={`toggle-circle ${isOn && 'toggle--checked'}`} />\n      </StyleToggleContainer>\n    </>\n  );\n}\n","import React from 'react';\nimport { styled } from 'styled-components';\nimport Page from '../components/common/Page';\nimport { StyleBackgroundButton } from '../components/common/Buttons';\nimport useNav from '../hooks/useNav';\n\nconst StyleNotFound = styled(Page)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  h2 {\n    font-size: 15rem;\n    margin-bottom: 50px;\n    font-weight: bold;\n    color: var(--backgroundColor);\n    text-shadow: 0px 0px 10px var(--black-300);\n  }\n  span {\n    font-size: 2rem;\n    text-align: center;\n    margin-bottom: 30px;\n    font-weight: var(--nanum-semi-bold);\n    color: var(--black-300);\n  }\n  button {\n    padding: 10px 25px;\n  }\n`;\n\nexport default function NotFound() {\n  const { toAbout } = useNav();\n  return (\n    <StyleNotFound>\n      <h2>404</h2>\n      <span>요청하신 페이지를 찾을 수 없습니다.</span>\n      <StyleBackgroundButton onClick={toAbout}>홈으로</StyleBackgroundButton>\n    </StyleNotFound>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { styled } from 'styled-components';\nimport Input from '../components/common/Input';\nimport Select from '../components/common/Select';\nimport FileInput from '../components/common/FileInput';\nimport useForm from '../hooks/useForm';\nimport Page from './../components/common/Page';\nimport useNav from '../hooks/useNav';\nimport EnterTag from '../components/PfPjPublic/EnterTag';\nimport WriteHeader from '../components/PfPjPublic/WriteHeader';\nimport SelectBox from '../components/PfPjPublic/SelectBox';\nimport useError from '../hooks/useError';\nimport { checkValidations } from '../utils/checkValidations';\nimport ProGress from '../components/common/ProGress';\nimport ToggleButton from '../components/common/ToggleButton';\nimport languages from '../static/languages';\nimport { portfolioWriteInitData, portfolioWriteRule } from '../static/portfolioInit';\nimport { shapingApiData } from '../utils/shapingApiData';\nimport { useParams } from 'react-router-dom';\nimport api from '../hooks/useAxiosInterceptor';\nimport Modal from '../components/common/Modal';\nimport { StyleBorderButton } from '../components/common/Buttons';\nimport { useSelector } from 'react-redux';\nimport useSubmitWriteEdit from '../hooks/useSubmitWriteEdit';\nimport { StyleProjectWrite } from './ProjectWrite';\nimport NotFound from './NotFound';\n\n// const StyleProjectWrite = styled(Page)`\n//   height: auto;\n//   background-color: transparent;\n//   padding-top: 6rem;\n//   font-size: 1.6rem;\n\n//   .margin-top-remove {\n//     margin-top: -20px !important;\n//   }\n//   .input-container {\n//     flex: 5;\n//     height: 100%;\n//     margin-right: 3rem;\n//     > div {\n//       margin-bottom: 3rem;\n//     }\n//   }\n//   .imgs-container {\n//     flex: 6;\n//     height: auto;\n//     > div {\n//       margin-bottom: 6rem;\n//     }\n//   }\n//   .submit-box {\n//     width: 100%;\n//     margin-bottom: 10rem;\n//     display: flex;\n//     button {\n//       font-size: 1.6rem;\n//       padding: 5px 15px;\n//       margin-right: 5rem;\n//     }\n//   }\n//   .data-select-container {\n//     gap: 1rem;\n//     div {\n//       flex: 1;\n//     }\n//   }\n//   .error {\n//     color: var(--error);\n//     margin-top: 1rem;\n//   }\n// `;\n\nexport default function PortfolioEdit() {\n  const { toPortfolio } = useNav();\n  const { portfolioId } = useParams();\n  const [dataForm, handleInputChange, clearForm, setDataForm] = useForm(portfolioWriteInitData);\n  const [errors, handleErrorChange, clearError, setErrors] = useError({}, portfolioWriteRule);\n  const [showModal, setShowModal] = useState(false);\n  const [apiResult, isSuccess, submitHandler] = useSubmitWriteEdit();\n  const [firstApiSuccess, setFirstApiSuccess] = useState(true);\n  const loginUserData = useSelector((state) => state.user);\n  const {\n    userInfo: { memberId },\n  } = useSelector((state) => state.user);\n  const width = '100%';\n  const height = '70rem';\n\n  useEffect(() => {\n    api\n      .get(`/portfolios/${portfolioId}`)\n      .then((res) => {\n        if (res.data.data.memberId !== memberId) {\n          toPortfolio();\n          alert('수정 권한이 없습니다');\n        }\n        setDataForm(shapingApiData(res.data.data));\n        setFirstApiSuccess(true);\n      })\n      .catch((err) => {\n        setShowModal(true);\n        if (err.message === 'Request failed with status code 404') {\n          setFirstApiSuccess('404');\n        } else {\n          setFirstApiSuccess(false);\n        }\n      });\n  }, []);\n\n  //테스트용 언어 옵션들\n  const languagesOptions = (() => {\n    const arr = [];\n    arr.push({ value: '', label: '-' });\n    for (let i = 0; i < languages.length; i++) {\n      arr.push({ value: languages[i], label: languages[i] });\n    }\n    return arr;\n  })();\n\n  return (\n    <>\n      {firstApiSuccess === '404' ? (\n        <NotFound />\n      ) : (\n        firstApiSuccess === true && (\n          <StyleProjectWrite className=\"col\">\n            {showModal && (\n              <Modal\n                type={'alert'}\n                setIsOpen={setShowModal}\n                title={'알림'}\n                body={\n                  firstApiSuccess ? apiResult : '서버와의 통신에 실패했습니다. 다시 시도해 주세요.'\n                }\n                confirmHandler={() =>\n                  !firstApiSuccess || isSuccess ? toPortfolio() : setShowModal(false)\n                }\n              />\n            )}\n            <WriteHeader type=\"portfolio\" state=\"edit\" />\n            <div className=\"write-wrapper row\">\n              <div className=\"input-container col\">\n                <Input\n                  label={'포트폴리오 제목'}\n                  width={'100%'}\n                  onChange={(e) => {\n                    handleInputChange(null, e.target.value, 'title');\n                    handleErrorChange(null, e.target.value, 'title', checkValidations);\n                  }}\n                  placeholder={'최소 10 글자 최대 30글자까지 입력 가능 합니다. (필수)'}\n                  type=\"text\"\n                  maxLength={30}\n                  defaultValue={dataForm.title}\n                />\n                <ProGress\n                  className={'margin-top-remove'}\n                  width={'100%'}\n                  height={'1.2rem'}\n                  fontSize={'1.2rem'}\n                  comPleteNum={portfolioWriteRule.title.max}\n                  proGressNum={dataForm.title.length ?? 0}\n                  error={dataForm.title.length < 10 ? true : false}\n                />\n\n                <SelectBox\n                  text={'사용할 언어를 선택 해주세요.'}\n                  component={\n                    <Select\n                      width={width}\n                      options={languagesOptions}\n                      defaultLabel={dataForm.lang}\n                      onClickHandler={(e) => {\n                        handleInputChange(null, e, 'language');\n                        handleErrorChange(null, e, 'language', checkValidations);\n                      }}\n                    />\n                  }\n                  error={errors.lang}\n                  name=\"언어\"\n                />\n\n                <SelectBox\n                  text={'포트폴리오에 댓글 허용 여부'}\n                  component={\n                    <ToggleButton\n                      width=\"10rem\"\n                      height=\"5rem\"\n                      onClickHandler={() => {\n                        handleInputChange(null, dataForm.isComment ? 0 : 1, 'isComment');\n                      }}\n                      defaultValue={dataForm.isComment}\n                      hideError={true}\n                    />\n                  }\n                  hideError={true}\n                  margin=\"3rem\"\n                  customText={dataForm.isComment ? '허용됨' : '허용되지 않음'}\n                />\n\n                <SelectBox\n                  text={'구직용, 재직용 임시'}\n                  component={\n                    <ToggleButton\n                      width=\"10rem\"\n                      height=\"5rem\"\n                      onClickHandler={() => {\n                        handleInputChange(null, dataForm.isEmploy ? 0 : 1, 'isEmploy');\n                      }}\n                      defaultValue={dataForm.isEmploy}\n                      hideError={true}\n                    />\n                  }\n                  hideError={true}\n                  margin=\"3rem\"\n                  customText={dataForm.isEmploy ? '구직을 위한 포트폴리오' : '일반 포트폴리오'}\n                />\n\n                <EnterTag\n                  width=\"100%\"\n                  height=\"3.5rem\"\n                  placeholder=\"태그는 최대 3개까지 등록이 가능합니다.\"\n                  handleInputChange={handleInputChange}\n                  defaultTags={\n                    dataForm.tags.length === 1 && dataForm.tags[0] === '' ? [] : dataForm.tags\n                  }\n                />\n\n                <Input\n                  label={'포트폴리오 본문'}\n                  width={width}\n                  height={height}\n                  type={'textarea'}\n                  onChange={(e) => {\n                    handleInputChange(null, e.target.value, 'body');\n                    handleErrorChange(null, e.target.value, 'body', checkValidations);\n                  }}\n                  placeholder={'최소 200 ~ 1000글자까지 입력 가능합니다. (필수)'}\n                  maxLength={1000}\n                  error={errors.body}\n                  defaultValue={dataForm.body}\n                />\n                <ProGress\n                  className={'margin-top-remove'}\n                  width={'100%'}\n                  height={'1.2rem'}\n                  fontSize={'1.2rem'}\n                  comPleteNum={portfolioWriteRule.body.max}\n                  proGressNum={dataForm.body.length ?? 0}\n                  error={dataForm.body.length < 100 ? true : false}\n                />\n              </div>\n\n              <div className=\"imgs-container col\">\n                <FileInput\n                  name={'타이틀 이미지'}\n                  width={'100%'}\n                  height={'55rem'}\n                  number={1}\n                  dataForm={dataForm}\n                  handleInputChange={handleInputChange}\n                  handleErrorChange={handleErrorChange}\n                  setWillDeleteImgs={true}\n                  clearError={clearError}\n                  defaultImgs={dataForm.titleImage}\n                />\n\n                <FileInput\n                  name={'이미지'}\n                  width={'100%'}\n                  height={'55rem'}\n                  number={10}\n                  dataForm={dataForm}\n                  handleInputChange={handleInputChange}\n                  setWillDeleteImgs={true}\n                  defaultImgs={dataForm.images}\n                />\n              </div>\n            </div>\n            <div className=\"button-box\">\n              <StyleBorderButton\n                onClick={() => {\n                  setShowModal(true);\n                  submitHandler(\n                    dataForm,\n                    errors,\n                    setErrors,\n                    'portfolio',\n                    loginUserData.userInfo.memberId,\n                    portfolioId,\n                  );\n                }}\n              >\n                수정\n              </StyleBorderButton>\n              <StyleBorderButton>취소</StyleBorderButton>\n            </div>\n          </StyleProjectWrite>\n        )\n      )}\n    </>\n  );\n}\n","export const shapingApiData = (obj,type) => {\n    const newData = {...obj};\n    for(let key in obj) {\n        if(key === 'images') {\n            const tempArr = [];\n            for(let i = 0; i < obj[key].length; i++) {\n                tempArr.push(obj[key][i].imageUrl);\n            }\n            newData[key] = tempArr;\n            newData.imageFile = new FormData();\n            newData.imageUrls = [];\n        } else if (key === 'projectTitleImage' || key === 'portfolioTitleImage') {\n            newData.titleImage = [obj[key].imageUrl];\n            newData.titleImageFile = new FormData();\n            newData.titleImageUrl = '';\n        }\n        \n    }\n    return newData;\n}\n"],"names":["StyleToggleContainer","styled","div","_templateObject","_taggedTemplateLiteral","props","$width","$height","concat","ToggleButton","_ref","_ref$width","width","_ref$height","height","_ref$defaultValue","defaultValue","onClickHandler","rest","_useState","useState","_useState2","_slicedToArray","isOn","setIsOn","useEffect","undefined","_jsx","_Fragment","children","_objectSpread","className","onClick","StyleNotFound","Page","NotFound","toAbout","useNav","_jsxs","StyleBackgroundButton","PortfolioEdit","_dataForm$title$lengt","_dataForm$body$length","toPortfolio","portfolioId","useParams","_useForm","useForm","portfolioWriteInitData","_useForm2","dataForm","handleInputChange","setDataForm","_useError","useError","portfolioWriteRule","_useError2","errors","handleErrorChange","clearError","setErrors","showModal","setShowModal","_useSubmitWriteEdit","useSubmitWriteEdit","_useSubmitWriteEdit2","apiResult","isSuccess","submitHandler","_useState3","_useState4","firstApiSuccess","setFirstApiSuccess","loginUserData","useSelector","state","user","memberId","userInfo","api","get","then","res","data","alert","shapingApiData","catch","err","message","languagesOptions","arr","push","value","label","i","languages","length","StyleProjectWrite","Modal","type","setIsOpen","title","body","confirmHandler","WriteHeader","Input","onChange","e","target","checkValidations","placeholder","maxLength","ProGress","fontSize","comPleteNum","max","proGressNum","error","SelectBox","text","component","Select","options","defaultLabel","lang","name","isComment","hideError","margin","customText","isEmploy","EnterTag","defaultTags","tags","FileInput","number","setWillDeleteImgs","defaultImgs","titleImage","images","StyleBorderButton","obj","newData","key","tempArr","imageUrl","imageFile","FormData","imageUrls","titleImageFile","titleImageUrl"],"sourceRoot":""}