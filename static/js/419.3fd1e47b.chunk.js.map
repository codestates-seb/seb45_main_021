{"version":3,"file":"static/js/419.3fd1e47b.chunk.js","mappings":"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","sources":["components/common/ToggleButton.jsx","pages/PortfolioWrite.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst StyleToggleContainer = styled.div`\n  position: relative;\n  width: ${(props) => props.$width};\n  height: ${(props) => props.$height};\n  cursor: pointer;\n  border-radius: 50px;\n  transition: 0.3s;\n  border: 1px solid white;\n  &.toggle--checked {\n    background-color: #363030;\n  }\n\n  .toggle-circle {\n    cursor: pointer;\n    transition: all 0.3s;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    margin: auto;\n    left: 2px;\n    width: ${(props) => `calc(${props.$height} - 8px)`};\n    height: ${(props) => `calc(${props.$height} - 8px)`};\n    border-radius: 50%;\n    background-color: var(--black-100);\n  }\n  .toggle--checked {\n    left: ${(props) => `calc(${props.$width} - ${props.$height} + 3px)`};\n  }\n`;\n\n/**\n *\n * @param {string} width 전체너비\n * @param {string} height 전체높이\n * @param {string} beforeBackColor 활성화 전 컬러\n * @param {string} afterBackColor 활성화 후 컬러\n * @param {string} circleColor 동그라미 컬러\n * @param {boolean} defaultValue 초기 상태 값\n * @param {function} onClickHandler 버튼 클릭시 작동되는 핸들러\n * @param {any} rest 나머지\n * @returns\n */\n\nexport default function ToggleButton({\n  width = '70px',\n  height = '35px',\n  defaultValue = false,\n  onClickHandler,\n  rest,\n}) {\n  const [isOn, setIsOn] = useState(defaultValue);\n  const handleToggleClick = () => {\n    setIsOn(!isOn);\n    onClickHandler && onClickHandler(!isOn);\n  };\n\n  useEffect(() => {\n    if (defaultValue !== undefined) {\n      setIsOn(defaultValue);\n    }\n  }, [defaultValue]);\n\n  return (\n    <>\n      <StyleToggleContainer\n        $width={width}\n        $height={height}\n        {...rest}\n        className={`toggle-container ${isOn && 'toggle--checked'}`}\n        onClick={handleToggleClick}\n      >\n        <div className={`toggle-circle ${isOn && 'toggle--checked'}`} />\n      </StyleToggleContainer>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport Input from '../components/common/Input';\nimport Select from '../components/common/Select';\nimport FileInput from '../components/common/FileInput';\nimport useForm from '../hooks/useForm';\nimport useNav from '../hooks/useNav';\nimport EnterTag from '../components/PfPjPublic/EnterTag';\nimport WriteDescription from '../components/PfPjPublic/WriteHeader';\nimport SelectBox from '../components/PfPjPublic/SelectBox';\nimport useError from '../hooks/useError';\nimport { checkValidations } from '../utils/checkValidations';\nimport ProGress from '../components/common/ProGress';\nimport ToggleButton from '../components/common/ToggleButton';\nimport languages from '../static/languages';\nimport {\n  portfolioErrorInitData,\n  portfolioWriteInitData,\n  portfolioWriteRule,\n} from '../static/portfolioInit';\nimport Modal from '../components/common/Modal';\nimport { useSelector } from 'react-redux';\nimport { StyleBackgroundButton } from '../components/common/Buttons';\nimport useSubmitWriteEdit from '../hooks/useSubmitWriteEdit';\nimport { tablet, desktop } from '../static/theme';\n\nimport styled from 'styled-components';\n\nconst StylePortfolioWrite = styled.section`\n  width: var(--inner);\n  margin: var(--center);\n  padding-top: 50px;\n  .write-wrapper {\n    display: flex;\n    .input-container {\n      gap: 15px;\n      width: 1%;\n      flex: 1;\n    }\n    gap: 100px;\n    ${desktop} {\n      flex-direction: column;\n      .input-container {\n        width: 100%;\n        flex: 1;\n      }\n    }\n  }\n  .write-description {\n    position: sticky;\n    top: 50px;\n    order: 1;\n    ${desktop} {\n      position: static;\n      order: 0;\n    }\n  }\n  input {\n    border: none;\n    border-bottom: 1px solid var(--black-600);\n    padding-top: 10px;\n    padding-left: 3px;\n    border-radius: 0;\n    transition: all.1s;\n    font-weight: var(--nanum-semi-bold);\n    font-size: 1.6rem;\n    &:focus {\n      border-color: var(--black-100);\n    }\n  }\n  .progress-input {\n    position: relative;\n    .progress-bar {\n      position: absolute;\n      bottom: 25px;\n    }\n  }\n  .selectors {\n    position: relative;\n    display: flex;\n    gap: 30px;\n    .lang-selector {\n      flex: 1;\n    }\n  }\n  .tag-container {\n    margin-top: 30px;\n    input {\n      margin-bottom: -10px;\n    }\n  }\n  .body-content {\n    border: 1px solid var(--black-500);\n    transition: all.1s;\n    font-weight: var(--nanum-bold);\n    font-size: 1.6rem;\n    &:focus {\n      border-color: var(--black-100);\n    }\n  }\n  .progress-textarea {\n    position: relative;\n    .progress-bar {\n      position: absolute;\n      top: 10px;\n    }\n  }\n\n  .body-image {\n    margin-top: 40px;\n  }\n  .button-box {\n    margin-top: 60px;\n    display: flex;\n    gap: 20px;\n    button {\n      width: 70px;\n    }\n  }\n`;\n\nexport default function PortfolioWrite() {\n  const { toPortfolio } = useNav();\n  const [dataForm, handleInputChange] = useForm(portfolioWriteInitData);\n  const [errors, handleErrorChange, clearError, setErrors] = useError(\n    portfolioErrorInitData,\n    portfolioWriteRule,\n  );\n  const [showModal, setShowModal] = useState(false);\n  const [apiResult, isSuccess, submitHandler, setApiResult] = useSubmitWriteEdit();\n  const [isCancel, setIsCancel] = useState(false);\n  const loginUserData = useSelector((state) => state.user);\n\n  const width = '100%';\n  const height = '40rem';\n\n  //테스트용 언어 옵션들\n  const languagesOptions = (() => {\n    const arr = [];\n    arr.push({ value: '', label: '-' });\n    for (let i = 0; i < languages.length; i++) {\n      arr.push({ value: languages[i], label: languages[i] });\n    }\n    return arr;\n  })();\n\n  return (\n    <StylePortfolioWrite className=\"col\">\n      {showModal && (\n        <Modal\n          type={isCancel ? 'confirm' : 'alert'}\n          setIsOpen={setShowModal}\n          title={'알림'}\n          body={apiResult}\n          confirmHandler={() => (isSuccess || isCancel ? toPortfolio() : setShowModal(false))}\n        />\n      )}\n      <div className=\"write-wrapper\">\n        <WriteDescription type=\"portfolio\" />\n        <div className=\"input-container col\">\n          <div className=\"progress-input\">\n            <Input\n              label={'포트폴리오 제목'}\n              width={'100%'}\n              onChange={(e) => {\n                handleInputChange(null, e.target.value, 'title');\n                handleErrorChange(null, e.target.value, 'title', checkValidations);\n              }}\n              placeholder={'10 - 30 글자를 입력해주세요'}\n              type=\"text\"\n              maxLength={30}\n            />\n            <ProGress\n              width={'100%'}\n              fontSize={'1.3rem'}\n              comPleteNum={portfolioWriteRule.title.max}\n              proGressNum={dataForm.title.length ?? 0}\n              error={dataForm.title.length < 10 ? true : false}\n            />\n          </div>\n          <div className=\"selectors\">\n            <SelectBox\n              className=\"lang-selector\"\n              text={'언어 선택'}\n              component={\n                <Select\n                  height=\"37px\"\n                  width={width}\n                  options={languagesOptions}\n                  defaultLabel={'-'}\n                  onClickHandler={(e) => {\n                    handleInputChange(null, e, 'lang');\n                    handleErrorChange(null, e, 'lang', checkValidations);\n                  }}\n                />\n              }\n            />\n            <SelectBox\n              className=\"comment-selector\"\n              text={'댓글작성 허용'}\n              component={\n                <ToggleButton\n                  onClickHandler={() => {\n                    handleInputChange(null, dataForm.isComment ? 0 : 1, 'isComment');\n                  }}\n                  defaultValue={dataForm.isComment}\n                  hideError={true}\n                />\n              }\n            />\n            <SelectBox\n              text={'구직용 여부'}\n              component={\n                <ToggleButton\n                  onClickHandler={() => {\n                    handleInputChange(null, dataForm.isEmploy ? 0 : 1, 'isEmploy');\n                  }}\n                  defaultValue={dataForm.isEmploy}\n                  hideError={true}\n                />\n              }\n              hideError={true}\n            />\n          </div>\n          <EnterTag\n            className=\"tag-container\"\n            width=\"100%\"\n            placeholder=\"태그는 최대 3개까지 등록이 가능합니다.\"\n            dataForm={dataForm}\n            handleInputChange={handleInputChange}\n          />\n          <div className=\"progress-textarea\">\n            <Input\n              className=\"body-content\"\n              label={'포트폴리오 본문'}\n              width={width}\n              height={height}\n              type={'textarea'}\n              onChange={(e) => {\n                handleInputChange(null, e.target.value, 'body');\n                handleErrorChange(null, e.target.value, 'body', checkValidations);\n              }}\n              placeholder={'200 - 1000 글자를 입력해주세요'}\n              maxLength={1000}\n              error={errors.body}\n            />\n            <ProGress\n              width={'100%'}\n              height={'1.2rem'}\n              fontSize={'1.2rem'}\n              comPleteNum={portfolioWriteRule.body.max}\n              proGressNum={dataForm.body.length ?? 0}\n              error={dataForm.body.length < 200 ? true : false}\n            />\n          </div>\n          <FileInput\n            className=\"title-image\"\n            name={'타이틀 이미지'}\n            width={'100%'}\n            height={'200px'}\n            number={1}\n            dataForm={dataForm}\n            handleInputChange={handleInputChange}\n            handleErrorChange={handleErrorChange}\n            clearError={clearError}\n          />\n          <FileInput\n            className=\"body-image\"\n            name={'이미지'}\n            width={'100%'}\n            height={'200px'}\n            number={10}\n            dataForm={dataForm}\n            handleInputChange={handleInputChange}\n          />\n        </div>\n      </div>\n      <div className=\"button-box\">\n        <StyleBackgroundButton\n          onClick={() => {\n            setShowModal(true);\n            submitHandler(\n              dataForm,\n              errors,\n              setErrors,\n              'portfolio',\n              loginUserData.userInfo.memberId,\n            );\n          }}\n        >\n          작성\n        </StyleBackgroundButton>\n        <StyleBackgroundButton\n          onClick={() => {\n            setShowModal(true);\n            setIsCancel(true);\n            setApiResult('작성 취소시 작성한 내용은 저장되지 않습니다.');\n          }}\n        >\n          취소\n        </StyleBackgroundButton>\n      </div>\n    </StylePortfolioWrite>\n  );\n}\n"],"names":["StyleToggleContainer","styled","div","_templateObject","_taggedTemplateLiteral","props","$width","$height","concat","ToggleButton","_ref","_ref$width","width","_ref$height","height","_ref$defaultValue","defaultValue","onClickHandler","rest","_useState","useState","_useState2","_slicedToArray","isOn","setIsOn","useEffect","undefined","_jsx","_Fragment","children","_objectSpread","className","onClick","StylePortfolioWrite","section","desktop","PortfolioWrite","_dataForm$title$lengt","_dataForm$body$length","toPortfolio","useNav","_useForm","useForm","portfolioWriteInitData","_useForm2","dataForm","handleInputChange","_useError","useError","portfolioErrorInitData","portfolioWriteRule","_useError2","errors","handleErrorChange","clearError","setErrors","showModal","setShowModal","_useSubmitWriteEdit","useSubmitWriteEdit","_useSubmitWriteEdit2","apiResult","isSuccess","submitHandler","setApiResult","_useState3","_useState4","isCancel","setIsCancel","loginUserData","useSelector","state","user","languagesOptions","arr","push","value","label","i","languages","length","_jsxs","Modal","type","setIsOpen","title","body","confirmHandler","WriteDescription","Input","onChange","e","target","checkValidations","placeholder","maxLength","ProGress","fontSize","comPleteNum","max","proGressNum","error","SelectBox","text","component","Select","options","defaultLabel","isComment","hideError","isEmploy","EnterTag","FileInput","name","number","StyleBackgroundButton","userInfo","memberId"],"sourceRoot":""}